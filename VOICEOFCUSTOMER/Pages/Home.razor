@page "/"
@using Web_Api.Models;
@using VOICEOFCUSTOMER.Components
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<div class="button-center">
    <button class="btn btn-primary" @onclick="addHandler">Add New Post</button>
</div>

@if (isAddModalOpen)
{
    <AddPostComponent OnPostAdded="@OnPostAddedHandler" OnPostCancel="@OnPostCancelHandler" />
}
else if (posts.Count == 0)
{
    <p>No posts available.</p>
}
else
{
    @foreach (var post in posts)
    {
        <CardComponent Post="@post" DeletePostHandler="@OnPostDeleteHandler" />
    }
}

@code {
    private List<Post> posts = new();

    private bool isAddModalOpen { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await Http.GetFromJsonAsync<List<Post>>("api/Post") ?? new List<Post>();
            Console.WriteLine(posts.Count + " posts available");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching posts: {ex.Message}");
        }
    }

    public void addHandler()
    {
        isAddModalOpen = true;
    }

    public async Task OnPostAddedHandler(Post post)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Post", post);

            if (response.IsSuccessStatusCode)
            {
                posts.Add(post);

            }
            else
            {
                Console.WriteLine("Failed to Add post.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding Post: {ex.Message}");
        }
        finally
        {
            isAddModalOpen = false; // Ensure modal closes regardless of success or failure
        }
    }

    public async void OnPostDeleteHandler(Post post)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Post/{post.Id}");


            if (response.IsSuccessStatusCode)
            {
                posts.RemoveAll(t => t.Id == post.Id);
            }
            else
            {
                Console.WriteLine("Failed to delete the Post.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting Post: {ex.Message}");
        }
        finally
        {
            isAddModalOpen = false;
        }
    }

    public void OnPostCancelHandler()
    {
        isAddModalOpen = false;
    }
}
